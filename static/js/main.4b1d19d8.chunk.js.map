{"version":3,"sources":["lib/Helper.ts","lib/Constants.ts","components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getExtensionUrl","file","chrome","runtime","getURL","PUBLIC_URL","EXTENSION_IDS","HorizontalLoginForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","setPassword","password","undefined","setState","encrypting","encryptCookie","then","copyToClipboard","type","getEncryptCookie","extensionUrl","shareUrl","length","alert","copy","message","info","copied","state","url","domain","cookies","encrypted","defaultPassword","token","bytes","CryptoJS","decrypt","this","data","JSON","parse","toString","Utf8","error","prompt","setCookies","getCurrentUrl","currentUrl","getDomain","Promise","resolve","getAll","cookiesJsonString","stringify","cipherText","encrypt","name","uri","query","Array","isArray","replace","urlCurrentTab","host","getCurrentTab","tabs","active","self","forEach","cookie","done","async","hostOnly","session","set","value","tab","getParameterByName","checkIsExtensionInstalled","decryptCookie","extension_id","sendMessage","window","location","href","response","getFieldDecorator","getFieldError","passwordError","isFieldTouched","layout","onSubmit","Item","prefix","style","color","disabled","validateStatus","help","rules","required","placeholder","onChange","target","textAlign","placement","title","icon","onClick","Component","WrappedHorizontalLoginForm","Form","create","Header","Layout","Footer","Content","App","width","margin","padding","Home","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4aAcaA,EAAkB,WAAyB,IAAxBC,EAAuB,uDAAR,IAC7C,OAAOC,OAAOC,QAAQC,OAAOH,ICdlBI,EAAa,2DACbC,EAAgB,CAC3B,mCACA,oCCQIC,E,YAWJ,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAVRC,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKH,MAAMI,KAAKC,gBAAe,SAACC,EAAUC,GACnCD,GACHE,QAAQC,IAAI,4BAA6BF,OAKvB,EAmJxBG,YAAc,SAACC,GACbA,EAAwB,KAAbA,EAAkBA,OAAWC,EACxC,EAAKC,SAAS,CAAEF,WAAUG,YAAY,IACtC,EAAKC,gBAAgBC,MAAK,WACxB,EAAKH,SAAS,CAAEC,YAAY,OAE9B,EAAKD,SAAS,CAAEF,cAzJM,EA4JxBM,gBAAkB,WAA6B,IAA5BC,EAA2B,uDAAZ,QAC1BC,EAAmB,EAAKA,mBACxBC,EAAwB,UAATF,EAAmB1B,EAAgB,oBAAsBK,EACxEwB,EAAQ,UAAMD,EAAN,kBAA4BD,GAEtCE,EAASC,OAAS,KACpBC,MAAM,sCAGJJ,IACFK,IAAKH,GACLI,IAAQC,KAAK,uBACb,EAAKb,SAAS,CAAEc,QAAQ,MArK1B,EAAKC,MAAQ,CACXC,IAAK,GACLC,OAAQ,GACRC,QAAS,GACTC,UAAW,GACXlB,YAAY,EACZH,cAAUC,EACVqB,gBAAiB,WACjBN,QAAQ,GAXY,E,2EAeJO,G,8EAGlB,IACMC,EAAQC,MAAaC,QAAQH,EAAOI,KAAKV,MAAMK,iBACnDM,EAAOC,KAAKC,MAAMN,EAAMO,SAASN,MAAaO,OAC9C,MAAOC,GAEP,GAAgB,OADZjC,EAAWkC,OAAO,4BAA6B,KAEjD,IACMV,EAASC,MAAaC,QAAQH,EAAOvB,GACzC4B,EAAOJ,EAAMO,SAASN,MAAaO,MACnC,MAAOC,GACPrB,MAAM,oBAIRgB,GACFD,KAAKQ,WAAWP,G,kMAKeD,KAAKS,iB,cAAhCC,E,0BACuBV,KAAKW,a,cAA5BnB,E,OACNQ,KAAKzB,SAAS,CAAEiB,SAAQD,IAAKmB,I,kBAEtB,IAAIE,SAAQ,SAACC,GAClBzD,OAAOqC,QAAQqB,OAAO,CACpBtB,OAAQA,GAAU,KACjB,SAACC,GAIA,IAAMsB,EAAoBb,KAAKc,UAAU,CACvCzB,IAAK,EAAKD,MAAMC,IAChBE,QAAS,EAAKH,MAAMG,UAElBpB,EAA0C,qBAAxB,EAAKiB,MAAMjB,SAA2B,EAAKiB,MAAMjB,SAAW,EAAKiB,MAAMK,gBACzFsB,EAAanB,MAAaoB,QAAQH,EAAmB1C,GAAU+B,WAInE,OADA,EAAK7B,SAAS,CAACkB,UAASC,UAAWuB,IAC5BJ,EAAQI,U,0FAMrB,OAAOjB,KAAKV,MAAMI,Y,yCAGDyB,EAAcC,GAC/B,IACInD,EADasB,QAAU6B,GAAK,GACSC,MAAMF,GAE/C,QADYG,MAAMC,QAAQtD,GAAUA,EAAO,GAAKA,IAC/B,IAAIuD,QAAQ,MAAO,O,wIAIAxB,KAAKS,iB,cAAnCgB,E,SACmBlC,QAAUkC,GAArBjC,E,EAANkC,K,kBACDlC,GAAU,I,2LAIKQ,KAAK2B,iB,uBAAnBpC,E,EAAAA,I,kBACDA,G,uFAIP,OAAO,IAAIqB,SAAQ,SAACC,GAElBzD,OAAOwE,KAAKP,MAAM,CAAEQ,QAAQ,EAAM,mBAAqB,IAAQ,SAAUD,GACvEf,EAAQe,EAAK,Y,gHAKArC,E,EAAAA,IAAKE,E,EAAAA,QAChBqC,EAAO9B,KACb+B,kBAAQtC,GAAS,SAAUuC,GAEzB,IAAMC,EAAOjC,KAAKkC,eACXF,EAAOG,gBACPH,EAAOI,QACdhF,OAAOqC,QAAQ4C,IAAf,aACE9C,OACGyC,IACF,SAACA,GACEA,GACF9D,QAAQC,IAAR,qBAA0B6D,EAAOb,KAAjC,aAA0Ca,EAAOM,QAEnDL,UAED,WACD/D,QAAQC,IAAR,sBAA2BoB,IAC3BuC,EAAKH,gBAAgBjD,MAAK,SAAA6D,U,+LAOQvC,KAAKS,iB,cAAnCgB,E,0BACczB,KAAKwC,mBAAmB,QAASf,I,OAA/C7B,E,OACN1B,QAAQC,IAAIoB,QAAUkC,GAAe,IACrCvD,QAAQC,IAAI,CAAEsD,gBAAe7B,UACzBA,GACFI,KAAKyC,4BACLzC,KAAK0C,cAAc9C,IAEnBI,KAAKvB,gB,mGAOPjB,EAAcuE,SAAQ,SAAAY,GACpB,IACEvF,OAAOC,QAAQuF,YAAYD,EAAc,CAAE1C,KAAM,CAAEd,QAAQ,aAAD,OAAe0D,OAAOC,SAASC,SAAY,SAACC,GACpG9E,QAAQC,IAAI,CAAE6E,gBAEhB,MAAOhF,GACLE,QAAQC,IAAIH,EAAImB,e,+BAgCd,IAAD,SACsDa,KAAKtC,MAAMI,KAAhEmF,EADD,EACCA,kBAAmBC,EADpB,EACoBA,cAGrBC,GAAgBC,EAJf,EACmCA,gBAGL,aAAeF,EAAc,YAElE,OADAhF,QAAQC,IAAI,CAACmB,MAAOU,KAAKV,QAEvB,kBAAC,IAAD,CAAM+D,OAAO,aAAaC,SAAUtD,KAAKrC,cACvC,kBAAC,IAAD,CAAOwB,QAAO,gBAAWa,KAAKV,MAAMG,QAAQT,OAA9B,uBAAmDgB,KAAKV,MAAME,QAAUZ,KAAK,YAC3F,kBAAC,IAAK2E,KAAN,KACE,kBAAC,IAAD,CACEC,OAAQ,kBAAC,IAAD,CAAM5E,KAAK,OAAO6E,MAAO,CAAEC,MAAO,qBAC1C9E,KAAK,OACL+E,UAAQ,EACRrB,MAAOtC,KAAKV,MAAMC,OAGtB,kBAAC,IAAKgE,KAAN,CAAWK,eAAgBT,EAAgB,QAAU,GAAIU,KAAMV,GAAiB,IAC7EF,EAAkB,WAAY,CAC7Ba,MAAO,CAAC,CAAEC,UAAU,EAAO5E,QAAS,iCADrC8D,CAGC,kBAAC,IAAD,CACEO,OAAQ,kBAAC,IAAD,CAAM5E,KAAK,OAAO6E,MAAO,CAAEC,MAAO,qBAC1C9E,KAAK,WACLoF,YAAY,oBACZC,SAAU,SAACrG,GAAD,OAAO,EAAKQ,YAAYR,EAAEsG,OAAO5B,YAIjD,kBAAC,IAAKiB,KAAN,CAAWE,MAAO,CAACU,UAAW,WAC5B,6BACE,kBAAC,IAAD,CAASC,UAAU,MAAMC,MAAM,8CAC7B,kBAAC,IAAD,CAAQzF,KAAK,UAAU0F,KAAK,OAAOC,QAAS,kBAAM,EAAK5F,gBAAgB,UAAUgF,SAAU3D,KAAKV,MAAMd,YAAtG,qBAKJ,6BACE,kBAAC,IAAD,CAAS4F,UAAU,SAASC,MAAM,cAChC,kBAAC,IAAD,CAAQzF,KAAK,UAAU0F,KAAK,OAAOC,QAAS,kBAAM,EAAK5F,gBAAgB,WAAWgF,SAAU3D,KAAKV,MAAMd,YAAvG,4B,GA9NoBgG,aA0OnBC,EADoBC,IAAKC,OAAO,CAAExD,KAAM,oBAApBuD,CAA0CjH,GC9OrEmH,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAoBTC,E,iLAdX,OACE,kBAAC,IAAD,CAAQvB,MAAO,CAACwB,MAAO,IAAKC,OAAQ,SAClC,kBAACN,EAAD,CAAQnB,MAAO,CAACC,MAAO,UAAWS,UAAW,WAA7C,cAGA,kBAACY,EAAD,CAAStB,MAAO,CAAC0B,QAAS,EAAGD,OAAQ,SACnC,kBAACE,EAAD,OAEF,kBAACN,EAAD,W,GAZUN,aCGEa,QACW,cAA7BxC,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpH,MAAK,SAAAqH,GACjCA,EAAaC,kB","file":"static/js/main.4b1d19d8.chunk.js","sourcesContent":["/// <reference path=\"../../../../typings.d.ts\" />\n\nexport const getBrowser = () => {\n  /* if (typeof chrome !== \"undefined\") {\n    if (typeof browser !== \"undefined\") {\n      return browser; // \"Firefox\";\n    } else {\n      return chrome; // \"Chrome\";\n    }\n  } else {\n    return \"Edge\";\n  } */\n}\n\nexport const getExtensionUrl = (file: string = '/') => {\n  return chrome.runtime.getURL(file);\n}","\nexport const PUBLIC_URL = 'https://khoazero123.github.io/give-access-url/index.html';\nexport const EXTENSION_IDS = [\n  'edfofjonpcdadngmpheilifigfaoafle', // Store\n  'eidgdkoamddnlbmfadangiakgdjngnmc', // Local\n];","import React, { Component } from 'react';\nimport { Form, Icon, Input, Button, Alert, message, Tooltip } from 'antd';\n// import { CopyToClipboard } from 'react-copy-to-clipboard';\nimport copy from 'copy-to-clipboard';\nimport * as url from 'url';\n// @ts-ignore\nimport { forEach } from 'async-foreach';\n// @ts-ignore\nimport * as CryptoJS from 'crypto-js';\nimport {getExtensionUrl} from '../lib/Helper';\nimport {PUBLIC_URL, EXTENSION_IDS} from '../lib/Constants';\n\nclass HorizontalLoginForm extends Component<any, any> {\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n    this.props.form.validateFields((err: any, values: any) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      url: '',\n      domain: '',\n      cookies: [],\n      encrypted: '',\n      encrypting: false,\n      password: undefined,\n      defaultPassword: 'password',\n      copied: false,\n    };\n  }\n\n  async decryptCookie(token: string): Promise<any> {\n    // token = (new Buffer(token, 'base64')).toString('ascii');\n    let data;\n    try {\n      let bytes = CryptoJS.AES.decrypt(token, this.state.defaultPassword);\n      data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    } catch (error) {\n      let password = prompt(\"Please enter the password\", \"\");\n      if (password != null) {\n        try {\n          let bytes  = CryptoJS.AES.decrypt(token, password);\n          data = bytes.toString(CryptoJS.enc.Utf8);\n        } catch (error) {\n          alert('Wrong password!');\n        }\n      }\n    }\n    if (data) {\n      this.setCookies(data);\n    }\n  }\n\n  async encryptCookie(): Promise<string> {\n    const currentUrl: string = await this.getCurrentUrl();\n    const domain: string = await this.getDomain();\n    this.setState({ domain, url: currentUrl });\n\n    return new Promise((resolve) => {\n      chrome.cookies.getAll({\n        domain: domain || '',\n      }, (cookies: any[]) => {\n          // this.setState({ cookies });\n          // if (cookies.length) {\n\n          const cookiesJsonString = JSON.stringify({\n            url: this.state.url,\n            cookies: this.state.cookies,\n          });\n          let password = typeof this.state.password !== 'undefined' ? this.state.password : this.state.defaultPassword;\n          let cipherText = CryptoJS.AES.encrypt(cookiesJsonString, password).toString();\n          // cipherText = Buffer.from(cipherText).toString('base64');\n\n          this.setState({cookies, encrypted: cipherText });\n          return resolve(cipherText);\n      });\n    });\n  }\n\n  getEncryptCookie() {\n    return this.state.encrypted;\n  }\n\n  getParameterByName(name: string, uri: string) {\n    const parseUrl = url.parse(uri, true);\n    let values: string | string[] = parseUrl.query[name];\n    let value = Array.isArray(values) ? values[0] : values;\n    return (value || '').replace(/\\s/g, '+',);\n  }\n\n  async getDomain(): Promise<string> {\n    const urlCurrentTab: string = await this.getCurrentUrl();\n    const { host: domain } = url.parse(urlCurrentTab);\n    return domain || '';\n  }\n\n  async getCurrentUrl(): Promise<string> {\n    const { url } = await this.getCurrentTab();\n    return url;\n  }\n\n  getCurrentTab(): Promise<any> {\n    return new Promise((resolve) => {\n      // chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n      chrome.tabs.query({ active: true, 'lastFocusedWindow': true }, function (tabs) {\n        resolve(tabs[0]);\n      });\n    });\n  }\n\n  async setCookies({ url, cookies }: {url: string, cookies: any[]}) {\n    const self = this;\n    forEach(cookies, function (cookie: any) {\n      // @ts-ignore\n      const done = this.async();\n      delete cookie.hostOnly;\n      delete cookie.session;\n      chrome.cookies.set({\n        url,\n        ...cookie,\n      }, (cookie: any) => {\n        if (cookie) {\n          console.log(`Set cookie ${cookie.name}: ${cookie.value}`);\n        }\n        done();\n      });\n    }, () => {\n      console.log(`Redriect to ${url}`);\n      self.getCurrentTab().then(tab => {\n        // chrome.tabs.update(tab.id, { url });\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const urlCurrentTab: string = await this.getCurrentUrl();\n    const token = await this.getParameterByName('token', urlCurrentTab);\n    console.log(url.parse(urlCurrentTab, true));\n    console.log({ urlCurrentTab, token });\n    if (token) {\n      this.checkIsExtensionInstalled();\n      this.decryptCookie(token);\n    } else {\n      this.encryptCookie();\n    }\n  }\n\n  checkIsExtensionInstalled() {\n    //if (window.location.href.includes(PUBLIC_URL)) {\n      // is public url\n    EXTENSION_IDS.forEach(extension_id => {\n      try {\n        chrome.runtime.sendMessage(extension_id, { data: { message: `Send from ${window.location.href}` } }, (response: any) => {\n          console.log({ response });\n        });\n      } catch (err) {\n          console.log(err.message);\n      }\n    });\n      \n    //}\n  }\n\n  setPassword = (password: any) => {\n    password = password !== '' ? password : undefined;\n    this.setState({ password, encrypting: true });\n    this.encryptCookie().then(() => {\n      this.setState({ encrypting: false });\n    });\n    this.setState({ password });\n  }\n\n  copyToClipboard = (type: string = 'local') => {\n    const getEncryptCookie = this.getEncryptCookie();\n    const extensionUrl = type === 'local' ? getExtensionUrl('popup/index.html') : PUBLIC_URL;\n    const shareUrl = `${extensionUrl}?token=${getEncryptCookie}`;\n\n    if (shareUrl.length > 2000) {\n      alert('Data too large. No more 2000 chars');\n    }\n\n    if (getEncryptCookie) {\n      copy(shareUrl);\n      message.info('Copied to clipboard');\n      this.setState({ copied: true });\n    }\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldError, isFieldTouched } = this.props.form;\n    \n    // Only show error after a field is touched.\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    console.log({state: this.state});\n    return (\n      <Form layout=\"horizontal\" onSubmit={this.handleSubmit}>\n        <Alert message={`Found ${this.state.cookies.length} cookies of ${this.state.domain}`} type=\"success\" />\n        <Form.Item>\n          <Input\n            prefix={<Icon type=\"link\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            type=\"text\"\n            disabled\n            value={this.state.url}\n          />\n        </Form.Item>\n        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n          {getFieldDecorator('password', {\n            rules: [{ required: false, message: 'Please input your Password!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Password (option)\"\n              onChange={(e) => this.setPassword(e.target.value)}\n            />,\n          )}\n        </Form.Item>\n        <Form.Item style={{textAlign: 'center'}}>\n          <div>\n            <Tooltip placement=\"top\" title=\"For those who have installed the extension\">\n              <Button type=\"primary\" icon=\"copy\" onClick={() => this.copyToClipboard('local')} disabled={this.state.encrypting}>\n                Copy local link\n              </Button>\n            </Tooltip>\n          </div>\n          <div>\n            <Tooltip placement=\"bottom\" title=\"For anyone\">\n              <Button type=\"primary\" icon=\"copy\" onClick={() => this.copyToClipboard('public')} disabled={this.state.encrypting}>\n                Copy public link\n              </Button>\n            </Tooltip>\n          </div>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create({ name: 'horizontal_login' })(HorizontalLoginForm);\nexport default WrappedHorizontalLoginForm;\n","import React, { Component } from 'react';\n\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\nimport './App.css';\nimport HomeComponent from './components/Home';\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <Layout style={{width: 350, margin: 'auto'}}>\n        <Header style={{color: '#f5deb3', textAlign: 'center'}}>\n          Access URL\n        </Header>\n        <Content style={{padding: 5, margin: 'auto'}}>\n          <HomeComponent/>\n        </Content>\n        <Footer></Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}